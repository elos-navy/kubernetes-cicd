---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ include "jenkins.fullname" . }}
  name: {{ include "jenkins.fullname" . }}-app-pipeline-job
data:
  config.xml: |-
    <?xml version='1.1' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.29">
      <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.4.1"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.4.1">
          <jobProperties/>
          <triggers/>
          <parameters/>
          <options/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
      </actions>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@1.0.27">
          <uid></uid>
          <namespace></namespace>
          <name></name>
          <resourceVersion></resourceVersion>
        </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
        <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
        <org.jenkinsci.plugins.workflow.job.properties.DisableResumeJobProperty/>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.61.1">
        <script>
    // Kubernetes resource names. Provided as parameters to helm chart installation.
    def jenkins_name         = &apos;{{ include "jenkins.fullname" . }}&apos;
    def app_dev_name         = &apos;{{ .Values.application.dev.resourceName }}&apos;
    def app_prod_name        = &apos;{{ .Values.application.prod.resourceName }}&apos;

    def jenkins_namespace    = &quot;{{ .Release.Namespace }}&quot;
    def infra_namespace      = &quot;{{ .Values.infra.namespace }}&quot;
    def app_dev_namespace    = &quot;{{ .Values.application.dev.namespace }}&quot;
    def app_prod_namespace   = &quot;{{ .Values.application.prod.namespace }}&quot;
 
    def registry_hostname    = &apos;{{ .Values.containerRegistry.hostname }}&apos;
    def registry_secret_name = &apos;{{ .Values.containerRegistry.secretName }}&apos;

    def maven_image          = &quot;${registry_hostname}/${jenkins_namespace}/jenkins-agent-maven&quot;

    def app_git_repo         = &apos;{{ .Values.application.git.url }}&apos;
    def app_git_branch       = &apos;{{ .Values.application.git.branch }}&apos;
    
    def sonarqube_url        = &quot;sonarqube.${infra_namespace}.svc.cluster.local&quot;
    def nexus_url            = &quot;http://admin:admin123@nexus.${infra_namespace}.svc.cluster.local:8081&quot;
    def app_dev_url          = &quot;http://application-dev.${app_dev_namespace}.svc.cluster.local:8080&quot;
    
    def maven_config_file    = &apos;nexus_openshift_settings.xml&apos;
    def mvnCmd               = &quot;mvn -s ./${maven_config_file}&quot;
    
    // Blue/Green deployment in production
    def gb_destination       = &apos;green&apos;
    def gb_active            = &apos;&apos;
    

    // Convenience Functions to read variables from the pom.xml
    // Do not change anything below this line.
    def getVersionFromPom(pom) {
      def matcher = readFile(pom) =~ &apos;&lt;version&gt;(.+)&lt;/version&gt;&apos;
      matcher ? matcher[0][1] : null
    }
    
    def getGroupIdFromPom(pom) {
      def matcher = readFile(pom) =~ &apos;&lt;groupId&gt;(.+)&lt;/groupId&gt;&apos;
      matcher ? matcher[0][1] : null
    }
    
    def getArtifactIdFromPom(pom) {
      def matcher = readFile(pom) =~ &apos;&lt;artifactId&gt;(.+)&lt;/artifactId&gt;&apos;
      matcher ? matcher[0][1] : null
    }

    pipeline {
      agent {
        kubernetes {
          label &apos;jenkins-agent-maven&apos;
          cloud &apos;openshift&apos;
          yaml &quot;&quot;&quot;
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
        pod: jenkins-agent-maven
    spec:
      imagePullSecrets:
      - name: ${registry_secret_name}
      containers:
      - name: maven
        image: ${maven_image}
        command:
        - cat
        tty: true
        securityContext:
          runAsUser: 1001
          allowPrivilegeEscalation: false
      - name: jnlp
        env:
        - name: JENKINS_URL
          value: &apos;http://${jenkins_name}.${jenkins_namespace}.svc.cluster.local:8080/&apos;
        - name: JENKINS_TUNNEL
          value: &apos;${jenkins_name}-jnlp.${jenkins_namespace}.svc.cluster.local:50000&apos;
        securityContext:
          runAsUser: 1001
          allowPrivilegeEscalation: false
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        imagePullPolicy: Always
        command:
        - /busybox/cat
        tty: true
        volumeMounts:
          - name: jenkins-docker-cfg
            mountPath: /kaniko/.docker
      volumes:
      - name: jenkins-docker-cfg
        projected:
          sources:
          - secret:
              name: ${registry_secret_name}
              items:
                - key: .dockerconfigjson
                  path: config.json
    &quot;&quot;&quot;
        }
      }
      
      environment {
        PATH = &apos;/opt/rh/rh-maven35/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/gradle/bin&apos;
        
        def groupId    = null
        def artifactId = null
        def version    = null
        
        // Label for container images and builds for testing.
        def build_tag  = null
      }
      
      stages {
        stage(&apos;Check Environment&apos;) {
          steps {
            container(&apos;maven&apos;) {
              sh &apos;mvn --version&apos;
              sh &apos;skopeo --version&apos;
              sh &apos;buildah --version&apos;
              sh &apos;kubectl version 2&gt;/dev/null || echo -n&apos;
            }
          }
        }
        
        stage(&apos;Checkout SCM &apos;) {
          steps {
            container(&apos;maven&apos;) {
              // Checkout code from SCM
              checkout([
                $class: &apos;GitSCM&apos;,
                branches: [[name: &quot;*/${app_git_branch}&quot;]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[url: app_git_repo]]])
            }
          }
        }
        
        stage(&apos;Setup maven configuration&apos;) {
          steps {
            container(&apos;maven&apos;) {
              // Set global variables according the code from SCM
              script {
                groupId    = getGroupIdFromPom(&quot;pom.xml&quot;)
                artifactId = getArtifactIdFromPom(&quot;pom.xml&quot;)
                version    = getVersionFromPom(&quot;pom.xml&quot;)
                
                build_tag  = &quot;${version}-${BUILD_NUMBER}&quot;
              }
              
              // Parse nexus config file template and create final config file.
              sh &quot;&quot;&quot;
                export CONFIG=&quot;
                  nexus:
                    url: $nexus_url
                    adminPassword: admin123
                &quot;
                
                gomplate \
                  -d &apos;config=env:///CONFIG?type=application/yaml&apos; \
                  -f artefacts/nexus_settings.xml.tmpl \
                  -o $maven_config_file
                
                cat $maven_config_file
              &quot;&quot;&quot;
            }
          }
        }
        
        stage(&apos;Test Env Variables&apos;) {
          steps {
            container(&apos;maven&apos;) {
              echo &quot;groupId ${groupId}&quot;
              echo &quot;artifactId ${artifactId}&quot;
              echo &quot;version ${version}&quot;
            }
          }
        }
        
        stage(&apos;Compile Source Code&apos;) {
          steps {
            container(&apos;maven&apos;) {
              echo &apos;Trying to compile application source code&apos;
              sh &quot;&quot;&quot;
                ${mvnCmd} clean package -DskipTests || {
                  echo \$?
                  exit 1
                }
              &quot;&quot;&quot;
            }
          }
        }
        
        stage(&apos;Execute Unit Tests&apos;) {
          steps {
            container(&apos;maven&apos;) {
              echo &apos;Running JUnit tests&apos;
              sh &quot;${mvnCmd} test&quot;
            }
          }
        }
        
        stage(&apos;Source Code Analysis&apos;) {
          steps {
            container(&apos;maven&apos;) {
              echo &apos;Running Sonar scans&apos;
              sh &quot;&quot;&quot;
                ${mvnCmd} sonar:sonar \
                  -Dsonar.host.url=http://${sonarqube_url}:9000 \
                  -Dsonar.projectName=${JOB_BASE_NAME} \
                  -Dsonar.projectVersion=${build_tag}
              &quot;&quot;&quot;
            }
          }
        }
        
        stage(&apos;Promote Binary Artifacts&apos;) {
          steps {
            container(&apos;maven&apos;) {
              echo &quot;Publish to Nexus&quot;
              sh &quot;&quot;&quot;
                ${mvnCmd} deploy \
                  -DskipTests=true \
                  -DaltDeploymentRepository=nexus::default::${nexus_url}/repository/releases
              &quot;&quot;&quot;
            }
          }
        }
       
        stage(&apos;Build and Push Docker Image&apos;){
          steps {
            container(&apos;maven&apos;) {
              sh &quot;&quot;&quot;
                mkdir /workspace &amp;&amp; cd /workspace
                 
                export CONFIG=&quot;
                  nexus:
                    url: $nexus_url
                  build:
                    version: $version
                &quot;
                gomplate \
                  -d &apos;config=env:///CONFIG?type=application/yaml&apos; \
                  -f artefacts/Dockerfile.tmpl \
                  -o Dockerfile
                
                cat Dockerfile
              &quot;&quot;&quot;
            }
            
            container(name: &apos;kaniko&apos;, shell: &apos;/busybox/sh&apos;) {
               withEnv([&apos;PATH+EXTRA=/busybox&apos;]) {
                 sh &quot;&quot;&quot;#!/busybox/sh
                   set -x
                   cd /workspace
                   /kaniko/executor \
                     --context /workspace \
                     --destination ${registry_hostname}/${jenkins_namespace}/tasks:${build_tag}
                 &quot;&quot;&quot;
               }
            }
          }
        }
    
        stage(&apos;Deploy Application into DEV&apos;) {
          steps {
            container(&apos;maven&apos;) {
              echo &quot;Deploying container image to Development Project&quot;
              
              sh &quot;&quot;&quot;
                helm delete --purge tasks-app-dev || echo
              &quot;&quot;&quot;
              
              sh &quot;&quot;&quot;
                cd helm
                helm install \
                  --name tasks-app-dev \
                  --namespace &apos;$app_dev_namespace&apos; \
                  --set name=&apos;$app_dev_name&apos; \
                  --set imageCredentials.secretName=&apos;${app_dev_name}-registry-secret&apos; \
                  --set image.repository=&apos;${registry_hostname}/${jenkins_namespace}/tasks&apos; \
                  --set image.tag=&apos;${build_tag}&apos; \
                  tasks-app
              &quot;&quot;&quot;
            }
          }
        }
        
        stage(&apos;Perform Integration Tests&apos;) {
          steps {
            container(&apos;maven&apos;) {
              echo &quot;Running Integration Tests&quot;
    
              // Wait till pod is ready
              wait_for_deployment_ready(app_dev_namespace, app_dev_name)
              
              sh &quot;&quot;&quot;
                export CONFIG=&quot;
                  application:
                    url: $app_dev_url
                &quot;
                
                gomplate \
                  -d &apos;config=env:///CONFIG?type=application/yaml&apos; \
                  -f artefacts/integration_tests.tmpl \
                  -o integration_tests.sh
                
                chmod +x integration_tests.sh
                ./integration_tests.sh
              &quot;&quot;&quot;
            }
          }
        }
        
        stage(&apos;Deploy Application into PROD&apos;) {
          steps {
            container(&apos;maven&apos;) {
              echo &quot;Deploying container image to Production Project&quot;
              
              script {
                gb_active = sh(
                  returnStdout: true,
                  script: &quot;&quot;&quot;
                    kubectl get ingress $app_prod_name \
                      -n $app_prod_namespace \
                      -o jsonpath=&apos;{ .spec.rules[0].http.paths[0].backend.serviceName }&apos;
                  &quot;&quot;&quot;
                ).trim()
    
                if (gb_active == &quot;${app_prod_name}-green&quot;) {
                  gb_destination = &apos;blue&apos;
                } else {
                  gb_destination = &apos;green&apos;
                }
              }
    
              sh &quot;&quot;&quot;
                helm delete --purge tasks-app-prod-${gb_destination} || echo
              &quot;&quot;&quot;
              
              sh &quot;&quot;&quot;
                cd helm
                helm install \
                  --name tasks-app-prod-${gb_destination} \
                  --namespace &apos;$app_prod_namespace&apos; \
                  --set name=&apos;${app_prod_name}-${gb_destination}&apos; \
                  --set imageCredentials.secretName=&apos;${app_prod_name}-registry-secret&apos; \
                  --set image.repository=&apos;${registry_hostname}/${jenkins_namespace}/tasks&apos; \
                  --set image.tag=&apos;${build_tag}&apos; \
                  tasks-app
              &quot;&quot;&quot;
            }
          }
        }
        
        stage(&apos;Switch to new Version&apos;) {
          steps {
            container(&apos;maven&apos;) {
              input &quot;Switch Production?&quot;
    
              sh &quot;&quot;&quot;
                kubectl patch ingress $app_prod_name \
                  -n $app_prod_namespace \
                  --type=json \
                  -p=&apos;[{&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/spec/rules/0/http/paths/0/backend/serviceName&quot;, &quot;value&quot;:&quot;${app_prod_name}-${gb_destination}&quot;}]&apos;
              &quot;&quot;&quot;
            }
          }
        }
      }
    }
       
    def wait_for_deployment_ready(namespace, deployment) {
      sh &quot;&quot;&quot;
        while true;
        do
          READY=\$(kubectl --namespace $namespace get deployment $deployment -o=custom-columns=AVAILABLE:.status.availableReplicas --no-headers)
          if [ \$READY -ge 1 ] 2&gt;/dev/null
          then
            break
          fi
          
          sleep 10
        done
      &quot;&quot;&quot;
    }</script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
