#!/bin/bash

source ./scripts/config

function handle_error {
  RET=$?

  if [ $RET -ne 0 ]; then
    echo "Error: $1"
    exit $RET
  fi
}

function create_from_template {
  FILE=$1; shift
  
  if [ ! -f "$FILE" ]; then
    echo "ERROR: File '$FILE' doesn't exist!"
    exit 1
  fi

  cp $FILE "${TMP_DIR}/$(basename $FILE)"

  while (( "$#" )); do
    #echo "Replacing parameter: $1 -> $2"
    sed -i 's@'$1'@'$2'@g' "${TMP_DIR}/$(basename $FILE)"
    shift
    shift
  done

  ERROR=0
  for i in $(seq 1 3)
  do
    kubectl create -f "${TMP_DIR}/$(basename $FILE)"

    # TODO What are return values for specific error - timeout/unreachable,... ?
    if [ $? -ne 0 ]; then
      echo "Error while creating a template ${TMP_DIR}/$(basename $FILE) !"
      echo "Retrying..."
      ERROR=1
      sleep 10
    else
      ERROR=0
      break
    fi
  done

  if [ "$ERROR" -eq 1 ]; then
    echo "Error while creating a template ${TMP_DIR}/$(basename $FILE) !"
    exit 1
  fi
}

function setup_credentials {
  rm -f ~/.kube/config
  az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
}

function install_kubectl() {
  if !(command -v kubectl >/dev/null); then
    KUBECTL_FILE="/usr/local/bin/kubectl"
    sudo curl -L -s -o $KUBECTL_FILE https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    sudo chmod +x $KUBECTL_FILE
  fi
}

function install_az() {
  if !(command -v az >/dev/null); then
    sudo apt-get update && sudo apt-get install -y libssl-dev libffi-dev python-dev
    echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/azure-cli/ wheezy main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
    sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893
    sudo apt-get install -y apt-transport-https
    sudo apt-get -y update && sudo apt-get install -y --allow-unauthenticated azure-cli
  fi
}

function wait_for_deployment_ready()
{
  NAMESPACE=$1
  LABEL=$2

  for i in $(seq 1 30)
  do
    COUNT=$(kubectl get deployment --no-headers -o=custom-columns=AVAILABLE:.status.availableReplicas -l $LABEL -n $NAMESPACE)
    [ $COUNT -gt 0 ] && break
    sleep 60
  done
}

function install_helm {
  which helm && return

  #curl -L https://git.io/get_helm.sh | bash

  cd /tmp
  wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gz
  tar xzf helm-v2.13.0-linux-amd64.tar.gz
  sudo mv -f linux-amd64/helm /usr/local/bin/
  sudo mv -f linux-amd64/tiller /usr/local/bin/
  cd -
}

function install_ingress_controller {

  # Create service account for tiller part.
  create_from_template templates/helm/helm-rbac.yaml
  helm init \
    --service-account tiller \
    --node-selectors "beta.kubernetes.io/os"="linux"
  helm repo update

  # Create namespace and nginx ingress pods.
  kubectl create namespace $INGRESS_NAMESPACE
  wait_for_deployment_ready 'kube-system' 'app=helm'
  helm install stable/nginx-ingress \
    --namespace $INGRESS_NAMESPACE \
    --set controller.replicaCount=2 \
    --set nodeSelector."beta.kubernetes.io/os"=linux
}

function wait_for_ingress_controller_public_ip {
  # Wait for public IP address of nginx ingress service
  ROUTER_IP=''
  for COUNTER in $(seq 1 30)
  do
    ROUTER_IP=$(kubectl get service -o=custom-columns=LB_IP:.status.loadBalancer.ingress[*].ip,TYPE:.spec.type --no-headers -l app=nginx-ingress -n ${INGRESS_NAMESPACE} | grep LoadBalancer | awk '{ print $1 }' | head -n1)
    [ "$ROUTER_IP" != "<pending>" ] && [ "$ROUTER_IP" != "<none>" ] && break
    echo "Waiting for public IP of ingress router service. (#${COUNTER})"
    sleep 60
  done
}

function install_cert_manager {
  kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.8/deploy/manifests/00-crds.yaml
  kubectl get ns $CERT_MANAGER_NAMESPACE || kubectl create namespace $CERT_MANAGER_NAMESPACE
  kubectl label namespace  $CERT_MANAGER_NAMESPACE certmanager.k8s.io/disable-validation=true
  helm repo add jetstack https://charts.jetstack.io
  helm repo update
  helm install \
    --name cert-manager \
    --namespace $CERT_MANAGER_NAMESPACE \
    --version v0.8.0 \
    jetstack/cert-manager

  # CA cluster issuer.
  # Wait till cluster issuer resource can be created.
  for i in $(seq 1 30)
    kubectl apply -f templates/ingress/cluster-issuer.yaml && break
    sleep 60
  done
}


# Azure related functions

function azure_setup_dns_record {
  az network dns record-set a add-record \
    --resource-group "mc_${RESOURCE_GROUP}_${CLUSTER_NAME}_${LOCATION}" \
    --zone-name "$1" \
    -n "$2" \
    -a $ROUTER_IP
}

function azure_enable_application_routing_addon {
  DNS_ZONE_NAME=$(az aks enable-addons \
    --resource-group ${RESOURCE_GROUP} \
    --name ${CLUSTER_NAME} \
    --addons http_application_routing \
  | jq '.addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName' \
  | sed 's/"//g')
}

function azure_get_dns_zone_name {
  DNS_ZONE_NAME=$(az network dns zone list -g "mc_${RESOURCE_GROUP}_${CLUSTER_NAME}_${LOCATION}" | jq '.[] | { name }' | jq '.name' | sed 's/"//g')
}

function azure_create_rg {
  az group create --name $RESOURCE_GROUP --location $LOCATION
}

function azure_delete_rg {
  az group delete --name $RESOURCE_GROUP
}

function azure_create_cluster {
  az aks create \
    --resource-group $RESOURCE_GROUP \
    --name $CLUSTER_NAME \
    --node-count 2 \
    --enable-addons http_application_routing \
    --generate-ssh-keys
}

function azure_delete_cluster {
  az aks delete \
    --resource-group $RESOURCE_GROUP \
    --name $CLUSTER_NAME
}

function azure_create_acr {
  az acr create \
    --resource-group $RESOURCE_GROUP \
    --name $REGISTRY_NAME \
    --admin-enabled true \
    --sku Standard

  az acr credential show \
    --name $REGISTRY_NAME
}

function azure_delete_acr {
  az acr delete \
    --resource-group $RESOURCE_GROUP \
    --name $REGISTRY_NAME
}

function azure_create_storage_account {
  az storage account create \
    --resource-group $SHADOW_RESOURCE_GROUP \
    --name $STORAGE_ACCOUNT_NAME \
    --location $LOCATION
}

